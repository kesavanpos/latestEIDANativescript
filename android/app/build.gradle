apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
        lintConfig file("xml/lint.xml")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi","armeabi-v7a"//,"arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.madgag.spongycastle:core:1.54.0.0'
    implementation 'com.madgag.spongycastle:prov:1.54.0.0'
    implementation 'com.madgag.spongycastle:pkix:1.54.0.0'
    implementation 'com.madgag.spongycastle:pg:1.54.0.0'
    implementation project(':ocr-reader-release')
    implementation 'com.rmtheis:tess-two:6.0.4'
    implementation project(':EIDAToolkit')
    implementation project(':xmlsec2-release')

    // feitian-plugin-release'
    implementation project(':feitian-plugin-release')

    // nfcreader-plugin-release'
    implementation project(':nfcreader-plugin-release')

    // morpho-plugin-release
    //implementation project(':morpho-plugin-release')

    // acs-plugin-release
    implementation project(':acs-plugin-release')

    //suprema-plugin-release
    implementation project(':suprema-plugin-release')
    implementation project(':libBioMini_v20')

    // gen2wave-plugin-release
    //implementation project(':gen2wave-plugin-release')

    // gen2waverp70a-plugin-release
    //implementation project(':gen2waverp70a-plugin-release')
    //implementation project(':libBioMini_v20')

    // idt-plugin-identos
    implementation project(':idt-plugin-identos')
    implementation project(':idt-pcsc-driver-release')
    implementation project(':idt-tactivo-driver-release')
    implementation ('net.java.dev.jna:jna:5.2.0@aar')

    // grabba-plugin-release
    implementation project(':idt-tactivo-driver-release')
}

// task to delete the old jar
task deleteOldJar(type: Delete) {
    delete'release/ToolKitConnector.jar'
}

// task to export contents as jar
task exportJar(type: Copy) {
    from('build/intermediates/packaged-classes/release/')
    into('release')
    include('classes.jar')
    // name the plugin
    rename('classes.jar','ToolKitConnector.jar')
}

exportJar.dependsOn(deleteOldJar, build)